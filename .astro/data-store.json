[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.9","content-config-digest","76a7382a778ecf84","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://yabood.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{\"js\":\"javascript\",\"ts\":\"typescript\"},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,32,33],"hello-world",{"id":11,"data":13,"body":25,"filePath":26,"assetImports":27,"digest":29,"legacyId":30,"deferredRender":31},{"title":14,"description":15,"pubDate":16,"heroImage":17,"tags":18,"author":23,"draft":24},"Hello World: Building a Modern Blog with Astro","Exploring the journey of creating a fast, SEO-optimized blog using Astro, Tailwind CSS, and modern web technologies",["Date","2025-08-10T00:00:00.000Z"],"__ASTRO_IMAGE_../../assets/hero-astro-blog.jpg",[19,20,21,22],"astro","web-development","jamstack","performance","Yousif Abood",false,"import Prose from '../../components/Prose.astro';\n\nWelcome to my new blog! This is the first post on a site built with **Astro**, a modern static site generator that delivers lightning-fast performance and excellent developer experience.\n\n## Why Astro?\n\nAfter evaluating various static site generators and frameworks, I chose Astro for several compelling reasons:\n\n### 1. Zero JavaScript by Default\n\nAstro ships zero JavaScript to the client by default, resulting in incredibly fast page loads. When you do need interactivity, Astro's **Islands Architecture** allows you to hydrate only the components that need it.\n\n```astro\n---\n// This runs at build time\nconst data = await fetch('https://api.example.com/data').then(r => r.json());\n---\n\n\u003C!-- This HTML is static -->\n\u003Cdiv>{data.title}\u003C/div>\n\n\u003C!-- This component is interactive only when needed -->\n\u003CInteractiveComponent client:visible />\n```\n\n### 2. Content-First Approach\n\nWith built-in support for Markdown and MDX, Astro makes it easy to focus on writing content while still having the flexibility to include interactive components when needed.\n\n### 3. Framework Agnostic\n\nAstro supports components from React, Vue, Svelte, and more. You can even mix and match frameworks in the same project!\n\n## Tech Stack Overview\n\nThis blog is built with a carefully selected tech stack optimized for performance and developer experience:\n\n- **Astro** - Static site generation with partial hydration\n- **Tailwind CSS v4** - Utility-first CSS with minimal bundle size\n- **MDX** - Markdown with JSX components for rich content\n- **TypeScript** - Type safety and better developer experience\n\n## Performance Optimizations\n\n### Image Optimization\n\nUsing Astro's built-in `\u003CImage />` component, all images are automatically optimized:\n\n```astro\nimport { Image } from 'astro:assets';\nimport heroImage from '../assets/hero.jpg';\n\n\u003CImage \n  src={heroImage} \n  alt=\"Hero\" \n  widths={[240, 540, 720, 1080]}\n  sizes=\"(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, 1080px\"\n/>\n```\n\n### SEO & Structured Data\n\nEvery page includes comprehensive SEO metadata and JSON-LD structured data for rich snippets:\n\n```json\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"headline\": \"Hello World: Building a Modern Blog with Astro\",\n  \"author\": {\n    \"@type\": \"Person\",\n    \"name\": \"Yousif Abood\"\n  },\n  \"datePublished\": \"2025-08-10T08:00:00+00:00\"\n}\n```\n\n## Core Web Vitals\n\nThis site achieves excellent Core Web Vitals scores:\n\n- **LCP (Largest Contentful Paint)**: \u003C 2.5s\n- **FID (First Input Delay)**: \u003C 100ms\n- **CLS (Cumulative Layout Shift)**: \u003C 0.1\n\n\u003Cdiv class=\"my-8 rounded-lg border-l-4 border-accent bg-accent/10 p-4\">\n  \u003Cp class=\"font-semibold\">ðŸ’¡ Pro Tip\u003C/p>\n  \u003Cp class=\"mt-2\">Use Astro's built-in `prefetch` directive to preload links on hover, making navigation feel instant:\u003C/p>\n  \u003Ccode class=\"mt-2 block rounded bg-gray-900 p-2 text-sm text-gray-100\">\n    {`\u003Ca href=\"/about\" data-astro-prefetch>About\u003C/a>`}\n  \u003C/code>\n\u003C/div>\n\n## What's Next?\n\nIn upcoming posts, I'll dive deeper into:\n\n1. **Advanced Astro Patterns** - Component composition and data fetching strategies\n2. **Tailwind CSS v4 Features** - Exploring the latest improvements and optimizations\n3. **MDX Components** - Building reusable components for rich content\n4. **Deployment Strategies** - Optimizing for GitHub Pages and CDN delivery\n\n## Conclusion\n\nBuilding this blog with Astro has been a fantastic experience. The combination of excellent performance, developer experience, and flexibility makes it an ideal choice for content-focused websites.\n\nStay tuned for more posts about web development, performance optimization, and modern tooling!\n\n---\n\n*Have questions or feedback? Feel free to reach out on [Twitter](https://twitter.com/yabood) or [GitHub](https://github.com/yabood).*","src/content/blog/hello-world.mdx",[28],"../../assets/hero-astro-blog.jpg","69e2bd7ca65c5e8f","hello-world.mdx",true,"astro-performance-guide",{"id":32,"data":34,"body":41,"filePath":42,"assetImports":43,"digest":45,"legacyId":46,"deferredRender":31},{"title":35,"description":36,"pubDate":37,"heroImage":38,"tags":39,"author":23,"draft":24},"Astro Performance Guide: Achieving Perfect Lighthouse Scores","A comprehensive guide to optimizing your Astro website for maximum performance, covering image optimization, bundle splitting, and Core Web Vitals",["Date","2025-08-11T00:00:00.000Z"],"__ASTRO_IMAGE_../../assets/astro-performance.jpg",[19,22,20,40],"optimization","import { Image } from 'astro:assets';\nimport heroImage from '../../assets/hero-astro-blog.jpg';\n\nPerformance is crucial for modern web applications, and Astro makes it easier than ever to build lightning-fast websites. In this comprehensive guide, we'll explore the key strategies to achieve perfect Lighthouse scores and excellent Core Web Vitals.\n\n## Why Performance Matters\n\nBefore diving into the technical details, let's understand why performance optimization is essential:\n\n- **User Experience**: Faster sites lead to higher engagement and lower bounce rates\n- **SEO Benefits**: Google uses Core Web Vitals as ranking factors\n- **Conversion Rates**: Every 100ms delay can reduce conversions by 1%\n- **Accessibility**: Better performance helps users on slower connections\n\n## Astro's Performance Advantages\n\n### 1. Zero JavaScript by Default\n\nAstro's most significant performance benefit is shipping zero JavaScript to the client by default. This means:\n\n```astro\n---\n// This runs at build time, not in the browser\nconst posts = await getCollection('blog');\nconst latestPosts = posts.slice(0, 5);\n---\n\n\u003C!-- This HTML is completely static -->\n\u003Cdiv class=\"posts\">\n  {latestPosts.map(post => (\n    \u003Carticle>\n      \u003Ch2>{post.data.title}\u003C/h2>\n      \u003Cp>{post.data.description}\u003C/p>\n    \u003C/article>\n  ))}\n\u003C/div>\n```\n\n### 2. Partial Hydration with Islands\n\nWhen you do need interactivity, Astro's Islands Architecture allows you to hydrate only specific components:\n\n```astro\n\u003C!-- Only this component will be interactive -->\n\u003CSearchWidget client:load />\n\n\u003C!-- This remains static -->\n\u003CBlogPost title=\"My Post\" content=\"...\" />\n```\n\n## Image Optimization Strategies\n\nOne of the most impactful performance optimizations is proper image handling. Astro's built-in `\u003CImage />` component provides automatic optimization:\n\n\u003CImage \n  src={heroImage} \n  alt=\"Astro development environment showing code and terminal\"\n  width={800}\n  height={400}\n  quality={80}\n  format=\"webp\"\n  loading=\"lazy\"\n  class=\"my-8 rounded-lg shadow-lg\"\n/>\n\n### Responsive Images\n\nThe `\u003CImage />` component automatically generates multiple sizes and formats:\n\n```astro\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/photo.jpg';\n\n\u003CImage \n  src={myImage}\n  alt=\"Description\"\n  widths={[240, 540, 720, 1080]}\n  sizes=\"(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, 1080px\"\n  loading=\"lazy\"\n/>\n```\n\nThis generates multiple image variants optimized for different screen sizes and automatically serves the best format (WebP, AVIF) based on browser support.\n\n## Core Web Vitals Optimization\n\n### Largest Contentful Paint (LCP)\n\nTarget: \u003C 2.5 seconds\n\n**Optimization strategies:**\n- Optimize hero images with `loading=\"eager\"`\n- Use `\u003Clink rel=\"preload\">` for critical resources\n- Minimize render-blocking resources\n\n```astro\n---\n// In your layout\n---\n\u003Chead>\n  \u003C!-- Preload critical images -->\n  \u003Clink rel=\"preload\" as=\"image\" href=\"/hero-image.webp\" />\n  \n  \u003C!-- Preload critical fonts -->\n  \u003Clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  \u003Clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n\u003C/head>\n```\n\n### First Input Delay (FID)\n\nTarget: \u003C 100ms\n\n**Optimization strategies:**\n- Minimize JavaScript execution time\n- Use Astro's Islands for selective hydration\n- Defer non-critical scripts\n\n### Cumulative Layout Shift (CLS)\n\nTarget: \u003C 0.1\n\n**Optimization strategies:**\n- Always specify image dimensions\n- Reserve space for dynamic content\n- Avoid inserting content above existing content\n\n```astro\n\u003C!-- Good: Explicit dimensions prevent layout shift -->\n\u003CImage \n  src={image}\n  alt=\"Description\"\n  width={800}\n  height={600}\n/>\n\n\u003C!-- Bad: No dimensions can cause layout shift -->\n\u003Cimg src=\"image.jpg\" alt=\"Description\" />\n```\n\n## Bundle Optimization\n\n### Code Splitting\n\nAstro automatically splits your code, but you can optimize further:\n\n```astro\n---\n// Dynamic imports for heavy components\nconst HeavyChart = lazy(() => import('../components/HeavyChart.jsx'));\n---\n\n\u003C!-- Only loads when needed -->\n\u003CHeavyChart client:visible />\n```\n\n### CSS Optimization\n\nAstro automatically:\n- Removes unused CSS\n- Inlines critical CSS\n- Minifies stylesheets\n\n```css\n/* Astro scoped styles are automatically optimized */\n\u003Cstyle>\n  .card {\n    padding: 1rem;\n    border-radius: 8px;\n  }\n\u003C/style>\n```\n\n## Monitoring Performance\n\n### Lighthouse CI\n\nAdd Lighthouse CI to your GitHub Actions:\n\n```yaml\nname: Lighthouse CI\non: [push]\njobs:\n  lhci:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - run: npm ci && npm run build\n      - run: npx @lhci/cli@0.12.x autorun\n```\n\n### Real User Monitoring\n\nConsider implementing RUM with tools like:\n- Google Analytics 4 (Core Web Vitals)\n- Vercel Analytics\n- Cloudflare Web Analytics\n\n## Performance Checklist\n\n- âœ… Optimize images with `\u003CImage />` component\n- âœ… Use appropriate loading strategies (`eager` vs `lazy`)\n- âœ… Minimize JavaScript with Islands Architecture\n- âœ… Implement proper caching headers\n- âœ… Compress assets (Brotli/Gzip)\n- âœ… Use a CDN for static assets\n- âœ… Optimize fonts with preload/prefetch\n- âœ… Monitor Core Web Vitals regularly\n\n## Advanced Optimizations\n\n### Service Workers\n\nFor even better performance, consider implementing a service worker:\n\n```javascript\n// sw.js\nconst CACHE_NAME = 'astro-site-v1';\nconst urlsToCache = [\n  '/',\n  '/styles/main.css',\n  '/assets/hero-image.webp'\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(urlsToCache))\n  );\n});\n```\n\n### Edge Functions\n\nFor dynamic content, consider edge functions with providers like:\n- Vercel Edge Functions\n- Netlify Edge Functions\n- Cloudflare Workers\n\n## Conclusion\n\nAstro provides excellent performance out of the box, but following these optimization strategies can help you achieve perfect Lighthouse scores and provide an exceptional user experience.\n\nRemember to:\n1. Measure performance regularly\n2. Optimize for your specific use case\n3. Test on real devices and connections\n4. Monitor Core Web Vitals in production\n\nWith these techniques, you'll have a blazing-fast website that delights users and ranks well in search engines.\n\n---\n\n*Want to dive deeper into Astro performance? Check out the [official Astro performance guide](https://docs.astro.build/en/guides/performance/) and feel free to reach out with questions!*","src/content/blog/astro-performance-guide.mdx",[44],"../../assets/astro-performance.jpg","818196635af99dfc","astro-performance-guide.mdx"]