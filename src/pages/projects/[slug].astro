---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  const updates = await getCollection('updates');

  return projects.map(project => ({
    params: { slug: project.slug },
    props: { 
      project,
      updates: updates.filter(update => update.data.project === project.slug)
    }
  }));
}

const { project, updates } = Astro.props;

const sortedUpdates = updates
  .filter(update => !update.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const phases = ['idea', 'research', 'implementation', 'release', 'iteration', 'archived'] as const;

const phaseLabels = {
  idea: 'Idea',
  research: 'Research',
  implementation: 'Implementation',
  release: 'Release',
  iteration: 'Iteration',
  archived: 'Archived'
};

const updatesByPhase = phases.reduce((acc, phase) => {
  acc[phase] = sortedUpdates.filter(update => update.data.phase === phase);
  return acc;
}, {} as Record<typeof phases[number], typeof updates>);


const lastUpdatedDate = sortedUpdates[0]?.data.date || project.data.startDate;
---

<BaseLayout
  title={`${project.data.title} - Project Journal`}
  description={project.data.description}>
  <Header />

  <main id="main" class="container mx-auto max-w-4xl px-4 py-12">
    <nav class="mb-8">
      <ol class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
        <li>
          <a href="/projects" class="hover:text-accent dark:hover:text-accent-light">Projects</a>
        </li>
        <li>/</li>
        <li class="font-medium text-gray-900 dark:text-white">{project.data.title}</li>
      </ol>
    </nav>

    <header class="mb-12">
      <h1 class="mb-4 text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl">
        {project.data.title}
      </h1>
      
      <div class="mb-6 flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
        <time datetime={project.data.startDate.toISOString()}>
          Started {project.data.startDate.toLocaleDateString('en-US', { 
            month: 'long', 
            year: 'numeric' 
          })}
        </time>
        <span>â€¢</span>
        <time datetime={lastUpdatedDate.toISOString()}>
          Updated {lastUpdatedDate.toLocaleDateString('en-US', { 
            month: 'long', 
            day: 'numeric',
            year: 'numeric' 
          })}
        </time>
      </div>

      <div class="mb-6 flex flex-wrap gap-2">
        {project.data.tags.map((tag) => (
          <span class="rounded-full bg-gray-100 px-3 py-1 text-sm font-medium text-gray-700 dark:bg-gray-800 dark:text-gray-300">
            {tag}
          </span>
        ))}
      </div>


      <div class="grid grid-cols-2 gap-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-900 sm:grid-cols-4">
        <div>
          <p class="text-sm text-gray-600 dark:text-gray-400">Status</p>
          <p class="font-semibold text-gray-900 dark:text-white capitalize">{project.data.status}</p>
        </div>
        <div>
          <p class="text-sm text-gray-600 dark:text-gray-400">Releases</p>
          <p class="font-semibold text-gray-900 dark:text-white">{project.data.releases}</p>
        </div>
        <div>
          <p class="text-sm text-gray-600 dark:text-gray-400">Contributors</p>
          <p class="font-semibold text-gray-900 dark:text-white">{project.data.contributors}</p>
        </div>
        <div>
          <p class="text-sm text-gray-600 dark:text-gray-400">Updates</p>
          <p class="font-semibold text-gray-900 dark:text-white">{sortedUpdates.length}</p>
        </div>
      </div>

      {(project.data.github || project.data.website) && (
        <div class="mt-6 flex gap-4">
          {project.data.github && (
            <a
              href={project.data.github}
              class="inline-flex items-center text-sm font-medium text-accent hover:text-accent-dark dark:text-accent-light dark:hover:text-accent"
              target="_blank"
              rel="noopener noreferrer">
              <svg
                class="mr-1 h-4 w-4"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true">
                <path
                  fill-rule="evenodd"
                  d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                  clip-rule="evenodd"
                />
              </svg>
              View on GitHub
            </a>
          )}

          {project.data.website && (
            <a
              href={project.data.website}
              class="inline-flex items-center text-sm font-medium text-accent hover:text-accent-dark dark:text-accent-light dark:hover:text-accent"
              target="_blank"
              rel="noopener noreferrer">
              <svg class="mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                />
              </svg>
              Live Demo
            </a>
          )}
        </div>
      )}
    </header>

    <div class="space-y-12">
      {phases.map(phase => {
        const phaseUpdates = updatesByPhase[phase];
        
        if (phaseUpdates.length === 0) return null;
        
        const displayedUpdates = phaseUpdates.slice(0, 3);
        const hasMore = phaseUpdates.length > 3;
        
        return (
          <section>
            <div class="mb-6 border-b border-gray-200 pb-2 dark:border-gray-700">
              <h2 class="flex items-center gap-3 text-2xl font-bold text-gray-900 dark:text-white">
                {phaseLabels[phase]}
                {phaseUpdates.length > 0 && (
                  <span class="text-base font-normal text-gray-500 dark:text-gray-400">
                    ({phaseUpdates.length})
                  </span>
                )}
              </h2>
            </div>
            
            {phaseUpdates.length === 0 ? (
              <p class="text-gray-500 dark:text-gray-400 italic">
                No updates yet in this phase.
              </p>
            ) : (
              <>
                <div class="space-y-6">
                  {displayedUpdates.map(update => (
                    <article class="group">
                      <a 
                        href={`/projects/${project.slug}/updates/${update.slug}`}
                        class="block rounded-lg border border-gray-200 p-6 transition-all hover:border-accent hover:shadow-md dark:border-gray-700 dark:hover:border-accent-light">
                        <time 
                          datetime={update.data.date.toISOString()}
                          class="text-sm text-gray-500 dark:text-gray-400">
                          {update.data.date.toLocaleDateString('en-US', { 
                            month: 'long', 
                            day: 'numeric',
                            year: 'numeric' 
                          })}
                        </time>
                        <h3 class="mt-2 text-xl font-semibold text-gray-900 group-hover:text-accent dark:text-white dark:group-hover:text-accent-light">
                          {update.data.title}
                        </h3>
                        <p class="mt-2 text-gray-600 dark:text-gray-400">
                          {update.data.summary}
                        </p>
                        {update.data.tags.length > 0 && (
                          <div class="mt-4 flex flex-wrap gap-2">
                            {update.data.tags.map(tag => (
                              <span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-600 dark:bg-gray-800 dark:text-gray-400">
                                {tag}
                              </span>
                            ))}
                          </div>
                        )}
                      </a>
                    </article>
                  ))}
                </div>
                
                {hasMore && (
                  <div class="mt-6">
                    <a 
                      href={`/projects/${project.slug}/phase/${phase}`}
                      class="inline-flex items-center text-sm font-medium text-accent hover:text-accent-dark dark:text-accent-light dark:hover:text-accent">
                      View all {phaseUpdates.length} updates in {phaseLabels[phase]}
                      <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>
                )}
              </>
            )}
          </section>
        );
      })}
    </div>
  </main>

  <Footer />
</BaseLayout>