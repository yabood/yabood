---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import Header from '../../../../components/Header.astro';
import Footer from '../../../../components/Footer.astro';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  const updates = await getCollection('updates');
  const phases = [
    'idea',
    'research',
    'implementation',
    'release',
    'iteration',
    'archived',
  ] as const;

  const paths: Array<{
    params: { slug: string; phaseSlug: string };
    props: { project: any; phase: string; updates: any[] };
  }> = [];

  for (const project of projects) {
    const projectUpdates = updates.filter(
      (update) => update.data.project === project.slug && !update.data.draft
    );

    for (const phase of phases) {
      const phaseUpdates = projectUpdates
        .filter((update) => update.data.phase === phase)
        .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

      if (phaseUpdates.length > 0) {
        paths.push({
          params: {
            slug: project.slug,
            phaseSlug: phase,
          },
          props: {
            project,
            phase,
            updates: phaseUpdates,
          },
        });
      }
    }
  }

  return paths;
}

const { project, phase, updates } = Astro.props;

const phaseLabels: Record<string, string> = {
  idea: 'Idea',
  research: 'Research',
  implementation: 'Implementation',
  release: 'Release',
  iteration: 'Iteration',
  archived: 'Archived',
};

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'CollectionPage',
  name: `${phaseLabels[phase]} Phase - ${project.data.title}`,
  description: `All updates from the ${phaseLabels[phase]} phase of ${project.data.title}`,
  url: `https://yabood.com/projects/${project.slug}/phase/${phase}`,
  isPartOf: {
    '@type': 'Blog',
    name: project.data.title,
    url: `https://yabood.com/projects/${project.slug}`,
  },
  numberOfItems: updates.length,
  mainEntity: {
    '@type': 'ItemList',
    itemListElement: updates.map((update, index) => ({
      '@type': 'ListItem',
      position: index + 1,
      item: {
        '@type': 'Article',
        headline: update.data.title,
        description: update.data.summary,
        datePublished: update.data.date.toISOString(),
        url: `https://yabood.com/projects/${project.slug}/updates/${update.slug}`,
      },
    })),
  },
};
---

<BaseLayout
  title={`${phaseLabels[phase]} Phase - ${project.data.title}`}
  description={`All updates from the ${phaseLabels[phase]} phase of ${project.data.title} (${updates.length} updates)`}>
  <script is:inline define:vars={{ jsonLd }}>
    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.textContent = JSON.stringify(jsonLd);
    document.head.appendChild(script);
  </script>

  <Header />

  <main id="main" class="container mx-auto max-w-3xl px-4 py-12">
    <nav class="mb-8">
      <ol class="flex flex-wrap items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
        <li>
          <a href="/projects" class="hover:text-accent dark:hover:text-accent-light">Projects</a>
        </li>
        <li>/</li>
        <li>
          <a
            href={`/projects/${project.slug}`}
            class="hover:text-accent dark:hover:text-accent-light">
            {project.data.title}
          </a>
        </li>
        <li>/</li>
        <li class="font-medium text-gray-900 dark:text-white">
          {phaseLabels[phase]}
        </li>
      </ol>
    </nav>

    <header class="mb-12">
      <div class="mb-4">
        <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl">
          {phaseLabels[phase]} Phase
        </h1>
      </div>

      <p class="text-lg text-gray-600 dark:text-gray-400">
        All {updates.length} update{updates.length !== 1 ? 's' : ''} from the {phaseLabels[phase]} phase
        of
        <a
          href={`/projects/${project.slug}`}
          class="font-medium text-accent hover:text-accent-dark dark:text-accent-light dark:hover:text-accent">
          {project.data.title}
        </a>
      </p>
    </header>

    <div class="space-y-8">
      {
        updates.map((update) => (
          <article class="group">
            <a
              href={`/projects/${project.slug}/updates/${update.slug}`}
              class="block rounded-lg border border-gray-200 p-6 transition-all hover:border-accent hover:shadow-md dark:border-gray-700 dark:hover:border-accent-light">
              <time
                datetime={update.data.date.toISOString()}
                class="text-sm text-gray-500 dark:text-gray-400">
                {update.data.date.toLocaleDateString('en-US', {
                  month: 'long',
                  day: 'numeric',
                  year: 'numeric',
                })}
              </time>

              <h2 class="mt-2 text-xl font-semibold text-gray-900 group-hover:text-accent dark:text-white dark:group-hover:text-accent-light">
                {update.data.title}
              </h2>

              <p class="mt-2 text-gray-600 dark:text-gray-400">{update.data.summary}</p>

              {update.data.tags.length > 0 && (
                <div class="mt-4 flex flex-wrap gap-2">
                  {update.data.tags.map((tag: string) => (
                    <span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-600 dark:bg-gray-800 dark:text-gray-400">
                      {tag}
                    </span>
                  ))}
                </div>
              )}

              <div class="mt-4 flex items-center text-sm text-accent group-hover:text-accent-dark dark:text-accent-light dark:group-hover:text-accent">
                Read more
                <svg
                  class="ml-1 h-4 w-4 transition-transform group-hover:translate-x-1"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </div>
            </a>
          </article>
        ))
      }
    </div>

    <div class="mt-12 text-center">
      <a
        href={`/projects/${project.slug}`}
        class="inline-flex items-center text-accent hover:text-accent-dark dark:text-accent-light dark:hover:text-accent">
        <svg class="mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"
          ></path>
        </svg>
        Back to {project.data.title}
      </a>
    </div>
  </main>

  <Footer />
</BaseLayout>
