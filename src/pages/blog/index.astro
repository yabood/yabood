---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { calculateReadingTime } from '../../utils/readingTime';

const posts = (await getCollection('blog'))
  .filter((post) => import.meta.env.DEV || !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const postsWithReadingTime = await Promise.all(
  posts.map(async (post) => {
    const content = post.body;
    const readingTime = calculateReadingTime(content);
    return { ...post, readingTime };
  })
);

// Group posts by year
const postsByYear = postsWithReadingTime.reduce((acc, post) => {
  const year = post.data.pubDate.getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof postsWithReadingTime>);

// Sort years in descending order
const sortedYears = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<BaseLayout title="Blog" description="Articles about web development, technology, and more">
  <Header />

  <main id="main" class="container mx-auto max-w-3xl px-4 py-12">
    <div class="space-y-16">
      {
        sortedYears.map((year) => (
          <section>
            <h2 class="mb-8 text-2xl font-bold text-gray-900 dark:text-white">
              {year}
            </h2>
            
            <div class="space-y-10">
              {postsByYear[Number(year)].map((post) => (
                <article class="group">
                  <a href={`/blog/${post.slug}`} class="block">
                    <div class="text-sm text-gray-600 dark:text-gray-400">
                      <time datetime={post.data.pubDate.toISOString()}>
                        {post.data.pubDate.toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                        })}
                      </time>
                      <span class="mx-2">·</span>
                      <span>{post.readingTime}</span>
                      {post.data.draft && (
                        <>
                          <span class="mx-2">·</span>
                          <span class="text-amber-600 dark:text-amber-400 font-medium">Draft</span>
                        </>
                      )}
                    </div>
                    <h3 class="mt-2 text-2xl font-bold text-gray-900 group-hover:text-accent dark:text-white dark:group-hover:text-accent-light">
                      {post.data.title}
                    </h3>
                    <p class="mt-2 text-gray-600 dark:text-gray-400">{post.data.description}</p>
                  </a>

                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="mt-4 flex flex-wrap gap-2">
                      {post.data.tags.map((tag) => (
                        <a
                          href={`/tags/${tag}`}
                          class="rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors">
                          #{tag}
                        </a>
                      ))}
                    </div>
                  )}
                </article>
              ))}
            </div>
          </section>
        ))
      }
    </div>

    {
      postsWithReadingTime.length === 0 && (
        <div class="text-center">
          <p class="text-gray-600 dark:text-gray-400">No posts yet. Check back soon!</p>
        </div>
      )
    }
  </main>

  <Footer />
</BaseLayout>
