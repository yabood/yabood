---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { calculateReadingTime } from '../../utils/readingTime';

export const prerender = true;

export async function getStaticPaths() {
  const posts = (await getCollection('blog')).filter(
    (post) => import.meta.env.DEV || !post.data.draft
  );
  const tags = [...new Set(posts.flatMap((post) => post.data.tags))];

  return tags.map((tag) => ({
    params: { tag },
    props: { tag },
  }));
}

type Props = {
  tag: string;
};

const { tag } = Astro.props;
const allPosts = (await getCollection('blog'))
  .filter((post) => (import.meta.env.DEV || !post.data.draft) && post.data.tags.includes(tag))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const posts = await Promise.all(
  allPosts.map(async (post) => {
    const content = post.body;
    const readingTime = calculateReadingTime(content);
    return { ...post, readingTime };
  })
);
---

<BaseLayout
  title={`Posts tagged "${tag}"`}
  description={`Blog posts about ${tag}`}
  breadcrumbs={[
    { name: 'Tags', url: '/tags' },
    { name: `#${tag}`, url: `/tags/${tag}` },
  ]}>
  <Header />

  <main id="main" class="container mx-auto max-w-3xl px-4 py-12">
    <div class="mb-12">
      <nav class="mb-6">
        <a
          href="/tags"
          class="inline-flex items-center text-sm font-medium text-accent ">
          <svg class="mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          All Tags
        </a>
      </nav>

      <div class="text-center">
        <h1
          class="mb-4 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
          Posts tagged
          <span
            class="rounded-full bg-gradient-to-r from-purple-500 to-pink-500 px-4 py-2 text-white shadow-lg">
            #{tag}
          </span>
        </h1>
        <p class="text-lg text-gray-600">
          {posts.length}
          {posts.length === 1 ? 'post' : 'posts'} found
        </p>
      </div>
    </div>

    <div class="space-y-12">
      {
        posts.map((post) => (
          <article class="group">
            <div>
              <a href={`/blog/${post.slug}`} class="block">
                <div class="text-sm text-gray-600">
                  <time datetime={post.data.pubDate.toISOString()}>
                    {post.data.pubDate.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })}
                  </time>
                  <span class="mx-2">·</span>
                  <span>{post.readingTime}</span>
                  {post.data.draft && (
                    <>
                      <span class="mx-2">·</span>
                      <span class="text-amber-600 font-medium">Draft</span>
                    </>
                  )}
                </div>
                <h2 class="mt-2 text-2xl font-bold text-gray-900 group-hover:text-accent">
                  {post.data.title}
                </h2>
                <p class="mt-2 text-gray-600">{post.data.description}</p>
              </a>

              {post.data.tags && post.data.tags.length > 0 && (
                <div class="mt-4 flex flex-wrap gap-2">
                  {post.data.tags.map((postTag) => (
                    <a
                      href={`/tags/${postTag}`}
                      class:list={[
                        'rounded-full px-3 py-1 text-xs font-medium transition-all',
                        postTag === tag
                          ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-md hover:shadow-lg hover:scale-105'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200',
                      ]}>
                      #{postTag}
                    </a>
                  ))}
                </div>
              )}
            </div>
          </article>
        ))
      }
    </div>

    {
      posts.length === 0 && (
        <div class="text-center">
          <p class="text-gray-600">No posts found for tag "#{tag}".</p>
          <a
            href="/tags"
            class="mt-4 inline-flex items-center text-sm font-medium text-accent ">
            Browse all tags
          </a>
        </div>
      )
    }
  </main>

  <Footer />
</BaseLayout>
