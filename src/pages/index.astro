---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { calculateReadingTime } from '../utils/readingTime';

// Fetch recent blog posts
const recentBlogPosts = (await getCollection('blog'))
  .filter((post) => import.meta.env.DEV || !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3);

const blogPostsWithReadingTime = await Promise.all(
  recentBlogPosts.map(async (post) => {
    const content = post.body;
    const readingTime = calculateReadingTime(content);
    return {
      ...post,
      readingTime,
      type: 'blog' as const,
      date: post.data.pubDate,
      title: post.data.title,
      description: post.data.description,
      url: `/blog/${post.slug}`,
      tags: post.data.tags,
      draft: post.data.draft,
      status: undefined,
    };
  })
);

// Fetch recent project updates
const recentUpdates = (await getCollection('updates'))
  .filter((update) => import.meta.env.DEV || !update.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .slice(0, 3)
  .map((update) => ({
    ...update,
    type: 'update' as const,
    date: update.data.date,
    title: update.data.title,
    description: update.data.summary,
    url: `/projects/${update.data.project}/updates/${update.slug}`,
    tags: update.data.tags,
    draft: update.data.draft,
    projectSlug: update.data.project,
    phase: update.data.phase,
    readingTime: undefined,
    status: undefined,
  }));

// Fetch recent noise
const recentNoise = (await getCollection('noise'))
  .filter((noise) => import.meta.env.DEV || !noise.data.draft)
  .filter((noise) => noise.data.visibility === 'public')
  .sort((a, b) => b.data.publishedAt.valueOf() - a.data.publishedAt.valueOf())
  .slice(0, 3);

// Extract first chars from noise content for description
function extractFirstChars(content: string, length: number = 160): string {
  const text = content
    .replace(/<[^>]*>/g, '')
    .replace(/!\[.*?\]\(.*?\)/g, '')
    .replace(/\[([^\]]+)\]\(.*?\)/g, '$1')
    .replace(/#{1,6}\s/g, '')
    .replace(/[*_~`]/g, '')
    .replace(/\n+/g, ' ')
    .trim();

  return text.length > length ? text.substring(0, length).trim() + '...' : text;
}

const noiseListWithMeta = recentNoise.map((noise) => ({
  ...noise,
  type: 'noise' as const,
  date: noise.data.publishedAt,
  title: noise.data.summary || extractFirstChars(noise.body, 80),
  description: extractFirstChars(noise.body, 160),
  url: `/noise/${noise.data.id}`,
  draft: noise.data.draft,
  tags: undefined,
  readingTime: undefined,
  status: undefined,
}));

// Combine and sort all entries by date
const allRecentEntries = [...blogPostsWithReadingTime, ...recentUpdates, ...noiseListWithMeta].sort(
  (a, b) => b.date.valueOf() - a.date.valueOf()
);
---

<BaseLayout
  title="Yousif Abood - Software Engineer"
  description="Personal website of Yousif Abood, a software engineer passionate about technology, development, and creativity. Sharing insights, tutorials, and thoughts on building better software."
  type="about">
  <Header />

  <main id="main" class="container mx-auto max-w-3xl px-4 py-12">
    <section class="mb-16">
      <h1 class="mb-4 text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl">
        Welcome to <span class="text-accent">Yabood</span>
      </h1>
      <p class="max-w-2xl text-lg text-gray-600">
        A personal blog about technology, development, and creativity. Sharing insights, tutorials,
        and thoughts on building better software.
      </p>
    </section>

    {
      allRecentEntries.length > 0 && (
        <section>
          <h2 class="mb-6 text-xl font-semibold text-gray-900">Recent Activity</h2>
          <div class="space-y-6">
            {allRecentEntries.map((entry) => (
              <article class="group">
                <a href={entry.url} class="block">
                  <div class="flex items-start justify-between">
                    <div class="flex-1">
                      <div class="flex items-center gap-2 text-sm text-gray-500">
                        {entry.type === 'blog' && (
                          <>
                            <span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-0.5 text-xs font-medium text-blue-700">
                              Blog
                            </span>
                            <span class="text-gray-400">·</span>
                          </>
                        )}
                        {entry.type === 'update' && (
                          <>
                            <span class="inline-flex items-center rounded-md bg-green-50 px-2 py-0.5 text-xs font-medium text-green-700">
                              {entry.projectSlug}
                            </span>
                            <span class="text-gray-400">·</span>
                          </>
                        )}
                        {entry.type === 'noise' && (
                          <>
                            <span class="inline-flex items-center rounded-md bg-purple-50 px-2 py-0.5 text-xs font-medium text-purple-700">
                              Noise
                            </span>
                            <span class="text-gray-400">·</span>
                          </>
                        )}
                        <time datetime={entry.date.toISOString()}>
                          {entry.date.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                          })}
                        </time>
                        {entry.type === 'blog' && entry.readingTime && (
                          <>
                            <span class="mx-1">·</span>
                            <span>{entry.readingTime}</span>
                          </>
                        )}
                        {entry.draft && (
                          <>
                            <span class="mx-1">·</span>
                            <span class="text-amber-600 font-medium">Draft</span>
                          </>
                        )}
                      </div>
                      <h3 class="mt-2 text-xl font-semibold text-gray-900 group-hover:text-accent">
                        {entry.title}
                      </h3>
                      {entry.description && (
                        <p class="mt-2 text-gray-600 line-clamp-2">{entry.description}</p>
                      )}
                      {entry.tags && entry.tags.length > 0 && (
                        <div class="mt-3 flex flex-wrap gap-2">
                          {entry.tags.slice(0, 3).map((tag) => (
                            <span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-600">
                              #{tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>

          <div class="mt-12 flex flex-wrap gap-4">
            <a href="/blog" class="inline-flex items-center text-base font-medium text-accent ">
              All Blog Posts
              <svg class="ml-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </a>
            <a href="/projects" class="inline-flex items-center text-base font-medium text-accent ">
              All Projects
              <svg class="ml-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </a>
            <a href="/noise" class="inline-flex items-center text-base font-medium text-accent ">
              All Noise
              <svg class="ml-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </a>
          </div>
        </section>
      )
    }
  </main>

  <Footer />
</BaseLayout>
